"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
"""

import asyncio
from typing import Dict, Any, Optional, List
from max_bot import Dispatcher
from max_bot.filters.base import command, text
from max_bot.core.types import Message

from .state import DialogManager, DialogState, BotType, BotConfig
from .validator import BotValidator
from ..templates.bot_templates import BotTemplates
from ..generator.code_generator import CodeGenerator


class EnhancedConstructorBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"""
    
    def __init__(self, token: str):
        self.dp = Dispatcher(token)
        self.dialog_manager = DialogManager()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(command("start"))
        async def start_command(message: Message):
            """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º"""
            user_id = message.from_user.id
            self.dialog_manager.reset_session(user_id)
            self.dialog_manager.set_state(user_id, DialogState.START)
            
            welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAX Bot Constructor Pro!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
/customize - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
/help - –°–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è
/preview - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞

–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /create
            """
            await message.answer(welcome_text)
        
        @self.dp.message_handler(command("create"))
        async def create_command(message: Message):
            """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
            user_id = message.from_user.id
            self.dialog_manager.set_state(user_id, DialogState.CHOOSE_TYPE)
            
            templates = BotTemplates.get_all_templates()
            choose_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:\n\n"
            
            for i, (key, template) in enumerate(templates.items(), 1):
                choose_text += f"{i}. {template['name']}\n"
                choose_text += f"   {template['description']}\n\n"
            
            choose_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –±–æ—Ç–∞ (1-5):"
            await message.answer(choose_text)
        
        @self.dp.message_handler(command("customize"))
        async def customize_command(message: Message):
            """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
            user_id = message.from_user.id
            config = self.dialog_manager.get_config(user_id)
            
            if not config.name:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /create")
                return
            
            await self._show_customization_menu(message)
        
        @self.dp.message_handler(command("preview"))
        async def preview_command(message: Message):
            """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞"""
            user_id = message.from_user.id
            config = self.dialog_manager.get_config(user_id)
            
            if not config.name:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /create")
                return
            
            await self._show_preview(message, config)
        
        @self.dp.message_handler(command("help"))
        async def help_command(message: Message):
            """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
            help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ MAX Bot Constructor Pro

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è MAX —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.

–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞
2. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã
4. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
5. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
/customize - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
/preview - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ 5 –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
            """
            await message.answer(help_text)
        
        @self.dp.message_handler(command("cancel"))
        async def cancel_command(message: Message):
            """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
            user_id = message.from_user.id
            self.dialog_manager.reset_session(user_id)
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        
        @self.dp.message_handler(command("status"))
        async def status_command(message: Message):
            """–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è"""
            user_id = message.from_user.id
            state = self.dialog_manager.get_state(user_id)
            config = self.dialog_manager.get_config(user_id)
            
            status_text = f"üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:\n\n"
            status_text += f"–≠—Ç–∞–ø: {state.value}\n"
            
            if config.name:
                status_text += f"–ò–º—è: {config.name}\n"
            if config.description:
                status_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {config.description}\n"
            if config.bot_type:
                status_text += f"–¢–∏–ø: {config.bot_type.value}\n"
            if config.commands:
                status_text += f"–ö–æ–º–∞–Ω–¥: {len(config.commands)}\n"
            if config.responses:
                status_text += f"–û—Ç–≤–µ—Ç–æ–≤: {len(config.responses)}\n"
            
            await message.answer(status_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        @self.dp.message_handler()
        async def dialog_handler(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
            user_id = message.from_user.id
            state = self.dialog_manager.get_state(user_id)
            text = message.text
            
            if state == DialogState.START:
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
                return
            
            if state == DialogState.CHOOSE_TYPE:
                await self._handle_type_selection(message, text)
            elif state == DialogState.BOT_NAME:
                await self._handle_name_input(message, text)
            elif state == DialogState.BOT_DESCRIPTION:
                await self._handle_description_input(message, text)
            elif state == DialogState.COMMANDS:
                await self._handle_commands_input(message, text)
            elif state == DialogState.RESPONSES:
                await self._handle_responses_input(message, text)
            elif state == DialogState.CUSTOMIZE_COMMANDS:
                await self._handle_command_customization(message, text)
            elif state == DialogState.CUSTOMIZE_RESPONSES:
                await self._handle_response_customization(message, text)
            elif state == DialogState.CONFIRM:
                await self._handle_confirmation(message, text)
    
    async def _handle_type_selection(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞"""
        user_id = message.from_user.id
        
        try:
            choice = int(text)
            templates = list(BotTemplates.get_all_templates().keys())
            
            if 1 <= choice <= len(templates):
                bot_type_name = templates[choice - 1]
                bot_type = BotType(bot_type_name)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
                template = BotTemplates.get_template(bot_type)
                BotTemplates.apply_template(self.dialog_manager.get_config(user_id), template)
                
                self.dialog_manager.set_state(user_id, DialogState.BOT_NAME)
                await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5:")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
    
    async def _handle_name_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        user_id = message.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error = BotValidator.validate_name(text)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        self.dialog_manager.update_config(user_id, name=text)
        self.dialog_manager.set_state(user_id, DialogState.BOT_DESCRIPTION)
        
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:")
    
    async def _handle_description_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        user_id = message.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        is_valid, error = BotValidator.validate_description(text)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.dialog_manager.update_config(user_id, description=text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._show_customization_menu(message)
    
    async def _show_customization_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        menu_text = f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ '{config.name}'\n\n"
        menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        menu_text += "1. üìù –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
        menu_text += "2. üí¨ –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞\n"
        menu_text += "3. üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        menu_text += "4. ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\n\n"
        menu_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä (1-4):"
        
        self.dialog_manager.set_state(user_id, DialogState.COMMANDS)
        await message.answer(menu_text)
    
    async def _handle_commands_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = message.from_user.id
        
        try:
            choice = int(text)
            if choice == 1:
                await self._show_commands_editor(message)
            elif choice == 2:
                await self._show_responses_editor(message)
            elif choice == 3:
                config = self.dialog_manager.get_config(user_id)
                await self._show_preview(message, config)
            elif choice == 4:
                await self._show_confirmation(message)
            else:
                await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 4:")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4:")
    
    async def _show_commands_editor(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        commands_text = "üìù –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        
        if config.commands:
            for i, cmd in enumerate(config.commands, 1):
                commands_text += f"{i}. /{cmd['command']} - {cmd['description']}\n"
        else:
            commands_text += "–ù–µ—Ç –∫–æ–º–∞–Ω–¥\n"
        
        commands_text += "\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        commands_text += "–∫–æ–º–∞–Ω–¥–∞:–æ–ø–∏—Å–∞–Ω–∏–µ\n"
        commands_text += "–ù–∞–ø—Ä–∏–º–µ—Ä: help:–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        commands_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: —É–¥–∞–ª–∏—Ç—å –ù–û–ú–ï–†\n"
        commands_text += "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –Ω–∞–∑–∞–¥"
        
        self.dialog_manager.set_state(user_id, DialogState.CUSTOMIZE_COMMANDS)
        await message.answer(commands_text)
    
    async def _handle_command_customization(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        if text.lower() == "–Ω–∞–∑–∞–¥":
            await self._show_customization_menu(message)
            return
        
        if text.lower().startswith("—É–¥–∞–ª–∏—Ç—å"):
            try:
                parts = text.split()
                if len(parts) == 2:
                    index = int(parts[1]) - 1
                    if 0 <= index < len(config.commands):
                        del config.commands[index]
                        await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞!")
                        await self._show_commands_editor(message)
                    else:
                        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã")
                else:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —É–¥–∞–ª–∏—Ç—å –ù–û–ú–ï–†")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        if ":" in text:
            try:
                command_name, description = text.split(":", 1)
                command_name = command_name.strip()
                description = description.strip()
                
                if command_name and description:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    for cmd in config.commands:
                        if cmd["command"] == command_name:
                            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            return
                    
                    config.commands.append({
                        "command": command_name,
                        "description": description
                    })
                    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    await self._show_commands_editor(message)
                else:
                    await message.answer("‚ùå –ò–º—è –∫–æ–º–∞–Ω–¥—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            except Exception:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥–∞:–æ–ø–∏—Å–∞–Ω–∏–µ")
        else:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥–∞:–æ–ø–∏—Å–∞–Ω–∏–µ")
    
    async def _show_responses_editor(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        responses_text = "üí¨ –¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞:\n\n"
        
        if config.responses:
            for key, response in config.responses.items():
                responses_text += f"'{key}': {response[:50]}...\n"
        else:
            responses_text += "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤\n"
        
        responses_text += "\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        responses_text += "–∫–ª—é—á:–æ—Ç–≤–µ—Ç\n"
        responses_text += "–ù–∞–ø—Ä–∏–º–µ—Ä: start:–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç\n\n"
        responses_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: —É–¥–∞–ª–∏—Ç—å –ö–õ–Æ–ß\n"
        responses_text += "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –Ω–∞–∑–∞–¥"
        
        self.dialog_manager.set_state(user_id, DialogState.CUSTOMIZE_RESPONSES)
        await message.answer(responses_text)
    
    async def _handle_response_customization(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        if text.lower() == "–Ω–∞–∑–∞–¥":
            await self._show_customization_menu(message)
            return
        
        if text.lower().startswith("—É–¥–∞–ª–∏—Ç—å"):
            try:
                parts = text.split(" ", 1)
                if len(parts) == 2:
                    key = parts[1].strip()
                    if key in config.responses:
                        del config.responses[key]
                        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω!")
                        await self._show_responses_editor(message)
                    else:
                        await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —É–¥–∞–ª–∏—Ç—å –ö–õ–Æ–ß")
            except Exception:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            return
        
        if ":" in text:
            try:
                key, response = text.split(":", 1)
                key = key.strip()
                response = response.strip()
                
                if key and response:
                    config.responses[key] = response
                    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
                    await self._show_responses_editor(message)
                else:
                    await message.answer("‚ùå –ö–ª—é—á –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            except Exception:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–ª—é—á:–æ—Ç–≤–µ—Ç")
        else:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–ª—é—á:–æ—Ç–≤–µ—Ç")
    
    async def _show_preview(self, message: Message, config: BotConfig):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞"""
        preview_text = f"üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞ '{config.name}'\n\n"
        preview_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {config.description}\n"
        preview_text += f"üè∑Ô∏è –¢–∏–ø: {config.bot_type.value}\n\n"
        
        preview_text += "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        if config.commands:
            for cmd in config.commands:
                preview_text += f"‚Ä¢ /{cmd['command']} - {cmd['description']}\n"
        else:
            preview_text += "–ù–µ—Ç –∫–æ–º–∞–Ω–¥\n"
        
        preview_text += "\nüí¨ –û—Ç–≤–µ—Ç—ã:\n"
        if config.responses:
            for key, response in list(config.responses.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                preview_text += f"‚Ä¢ '{key}': {response[:30]}...\n"
            if len(config.responses) > 5:
                preview_text += f"... –∏ –µ—â–µ {len(config.responses) - 5} –æ—Ç–≤–µ—Ç–æ–≤\n"
        else:
            preview_text += "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤\n"
        
        await message.answer(preview_text)
    
    async def _show_confirmation(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        confirm_text = f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n"
        confirm_text += f"–ò–º—è: {config.name}\n"
        confirm_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {config.description}\n"
        confirm_text += f"–¢–∏–ø: {config.bot_type.value}\n"
        confirm_text += f"–ö–æ–º–∞–Ω–¥: {len(config.commands)}\n"
        confirm_text += f"–û—Ç–≤–µ—Ç–æ–≤: {len(config.responses)}\n\n"
        confirm_text += f"–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç)"
        
        self.dialog_manager.set_state(user_id, DialogState.CONFIRM)
        await message.answer(confirm_text)
    
    async def _handle_confirmation(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = message.from_user.id
        
        if text.lower() in ['–¥–∞', 'yes', 'y', '1']:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            config = self.dialog_manager.get_config(user_id)
            output_dir = CodeGenerator.generate_project_structure(config)
            
            await message.answer(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                               f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}\n\n"
                               f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:\n"
                               f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É {output_dir}\n"
                               f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt\n"
                               f"3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ bot.py\n"
                               f"4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py\n\n"
                               f"üéâ –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            
            self.dialog_manager.set_state(user_id, DialogState.FINISHED)
        elif text.lower() in ['–Ω–µ—Ç', 'no', 'n', '0']:
            self.dialog_manager.reset_session(user_id)
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        self.dp.run()
