"""
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –¥–∏–∞–ª–æ–≥–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import asyncio
from typing import Dict, Any, Optional, List, Tuple
from max_bot import Dispatcher
from max_bot.filters.base import command, text
from max_bot.core.types import Message

from .state import DialogManager, DialogState, BotType, BotConfig
from .validator import BotValidator
from ..templates.bot_templates import BotTemplates
from ..generator.code_generator import CodeGenerator


class ConstructorBot:
    """–ë–æ—Ç-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self, token: str):
        self.dp = Dispatcher(token)
        self.dialog_manager = DialogManager()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message_handler(command("start"))
        async def start_command(message: Message):
            """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º"""
            user_id = message.from_user.id
            self.dialog_manager.reset_session(user_id)
            self.dialog_manager.set_state(user_id, DialogState.START)
            
            welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAX Bot Constructor!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è

–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /create
            """
            await message.answer(welcome_text)
        
        @self.dp.message_handler(command("create"))
        async def create_command(message: Message):
            """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
            user_id = message.from_user.id
            self.dialog_manager.set_state(user_id, DialogState.CHOOSE_TYPE)
            
            templates = BotTemplates.get_all_templates()
            choose_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:\n\n"
            
            for i, (key, template) in enumerate(templates.items(), 1):
                choose_text += f"{i}. {template['name']}\n"
                choose_text += f"   {template['description']}\n\n"
            
            choose_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –±–æ—Ç–∞ (1-5):"
            await message.answer(choose_text)
        
        @self.dp.message_handler(command("help"))
        async def help_command(message: Message):
            """–°–ø—Ä–∞–≤–∫–∞"""
            help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ MAX Bot Constructor

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è MAX –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞
2. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            """
            await message.answer(help_text)
        
        @self.dp.message_handler(command("cancel"))
        async def cancel_command(message: Message):
            """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
            user_id = message.from_user.id
            self.dialog_manager.reset_session(user_id)
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        
        @self.dp.message_handler(command("status"))
        async def status_command(message: Message):
            """–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è"""
            user_id = message.from_user.id
            state = self.dialog_manager.get_state(user_id)
            config = self.dialog_manager.get_config(user_id)
            
            status_text = f"üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:\n\n"
            status_text += f"–≠—Ç–∞–ø: {state.value}\n"
            
            if config.name:
                status_text += f"–ò–º—è: {config.name}\n"
            if config.description:
                status_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {config.description}\n"
            if config.bot_type:
                status_text += f"–¢–∏–ø: {config.bot_type.value}\n"
            if config.commands:
                status_text += f"–ö–æ–º–∞–Ω–¥: {len(config.commands)}\n"
            
            await message.answer(status_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        @self.dp.message_handler()
        async def dialog_handler(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
            user_id = message.from_user.id
            state = self.dialog_manager.get_state(user_id)
            text = message.text
            
            if state == DialogState.START:
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
                return
            
            if state == DialogState.CHOOSE_TYPE:
                await self._handle_type_selection(message, text)
            elif state == DialogState.BOT_NAME:
                await self._handle_name_input(message, text)
            elif state == DialogState.BOT_DESCRIPTION:
                await self._handle_description_input(message, text)
            elif state == DialogState.COMMANDS:
                await self._handle_commands_input(message, text)
            elif state == DialogState.RESPONSES:
                await self._handle_responses_input(message, text)
            elif state == DialogState.CONFIRM:
                await self._handle_confirmation(message, text)
    
    async def _handle_type_selection(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞"""
        user_id = message.from_user.id
        
        try:
            choice = int(text)
            templates = list(BotTemplates.get_all_templates().keys())
            
            if 1 <= choice <= len(templates):
                bot_type_name = templates[choice - 1]
                bot_type = BotType(bot_type_name)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
                template = BotTemplates.get_template(bot_type)
                BotTemplates.apply_template(self.dialog_manager.get_config(user_id), template)
                
                self.dialog_manager.set_state(user_id, DialogState.BOT_NAME)
                await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5:")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
    
    async def _handle_name_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        user_id = message.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error = BotValidator.validate_name(text)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        self.dialog_manager.update_config(user_id, name=text)
        self.dialog_manager.set_state(user_id, DialogState.BOT_DESCRIPTION)
        
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:")
    
    async def _handle_description_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        user_id = message.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        is_valid, error = BotValidator.validate_description(text)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.dialog_manager.update_config(user_id, description=text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥
        self.dialog_manager.set_state(user_id, DialogState.COMMANDS)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n\n"
            "–§–æ—Ä–º–∞—Ç: –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É, 'command: –û–ø–∏—Å–∞–Ω–∏–µ'.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/start: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
    
    async def _handle_commands_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥"""
        user_id = message.from_user.id
        commands, parse_error = self._parse_commands(text)
        if parse_error:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥: {parse_error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        is_valid, error = BotValidator.validate_commands(commands)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        self.dialog_manager.update_config(user_id, commands=commands)
        self.dialog_manager.set_state(user_id, DialogState.RESPONSES)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç–∞–º
        example_keys = [c["command"] for c in commands][:3]
        examples = "\n".join([f"{k}: –û—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{k}" for k in example_keys])
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
            "–§–æ—Ä–º–∞—Ç: '–∫–ª—é—á: —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞' –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n"
            "–ö–ª—é—á–∏ –æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏–º–µ–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥ –±–µ–∑ '/'. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 'default' –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n{examples}\ndefault: –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
    
    async def _handle_responses_input(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = message.from_user.id
        responses, parse_error = self._parse_responses(text)
        if parse_error:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–æ–≤: {parse_error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        is_valid, error = BotValidator.validate_responses(responses)
        if not is_valid:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        self.dialog_manager.update_config(user_id, responses=responses)
        await self._show_confirmation(message)

    def _parse_commands(self, raw: str) -> Tuple[List[Dict[str, str]], Optional[str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        lines = [line.strip() for line in raw.splitlines() if line.strip()]
        if not lines:
            return [], None
        commands: List[Dict[str, str]] = []
        for idx, line in enumerate(lines, 1):
            # –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ':' –∏–ª–∏ '-' –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª–µ—à –≤ –Ω–∞—á–∞–ª–µ
            separator = ':' if ':' in line else ('-' if '-' in line else None)
            if not separator:
                return [], f"–°—Ç—Ä–æ–∫–∞ {idx} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':' –∏–ª–∏ '-' –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"
            name_part, desc_part = [p.strip() for p in line.split(separator, 1)]
            if name_part.startswith('/'):
                name_part = name_part[1:]
            if not name_part:
                return [], f"–ü—É—Å—Ç–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫–µ {idx}"
            commands.append({"command": name_part.lower(), "description": desc_part})
        return commands, None

    def _parse_responses(self, raw: str) -> Tuple[Dict[str, str], Optional[str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        lines = [line.strip() for line in raw.splitlines() if line.strip()]
        if not lines:
            return {}, None
        responses: Dict[str, str] = {}
        for idx, line in enumerate(lines, 1):
            if ':' not in line:
                return {}, f"–°—Ç—Ä–æ–∫–∞ {idx} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':' –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"
            key, value = [p.strip() for p in line.split(':', 1)]
            if key.startswith('/'):
                key = key[1:]
            if not key:
                return {}, f"–ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ —Å—Ç—Ä–æ–∫–µ {idx}"
            responses[key] = value
        return responses, None
    
    async def _handle_confirmation(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = message.from_user.id
        
        if text.lower() in ['–¥–∞', 'yes', 'y', '1']:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            config = self.dialog_manager.get_config(user_id)
            output_dir = CodeGenerator.generate_project_structure(config)
            
            await message.answer(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                               f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}\n\n"
                               f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:\n"
                               f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É {output_dir}\n"
                               f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt\n"
                               f"3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ bot.py\n"
                               f"4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
            
            self.dialog_manager.set_state(user_id, DialogState.FINISHED)
        elif text.lower() in ['–Ω–µ—Ç', 'no', 'n', '0']:
            self.dialog_manager.reset_session(user_id)
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':")
    
    async def _show_confirmation(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        user_id = message.from_user.id
        config = self.dialog_manager.get_config(user_id)
        
        confirm_text = f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n"
        confirm_text += f"–ò–º—è: {config.name}\n"
        confirm_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {config.description}\n"
        confirm_text += f"–¢–∏–ø: {config.bot_type.value}\n"
        confirm_text += f"–ö–æ–º–∞–Ω–¥: {len(config.commands)}\n\n"
        confirm_text += f"–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞? (–¥–∞/–Ω–µ—Ç)"
        
        self.dialog_manager.set_state(user_id, DialogState.CONFIRM)
        await message.answer(confirm_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        self.dp.run()
