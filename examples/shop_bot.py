"""
–ü—Ä–∏–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MAX Bot Library
"""

from max_bot import Dispatcher
from max_bot.filters.base import command, text, callback_data
from max_bot.middleware.base import LoggingMiddleware


# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher("YOUR_BOT_TOKEN")

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
products = {
    "1": {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "price": 25000, "description": "–ú–æ—â–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π"},
    "2": {"name": "–ù–æ—É—Ç–±—É–∫", "price": 45000, "description": "–ò–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π"},
    "3": {"name": "–ù–∞—É—à–Ω–∏–∫–∏", "price": 5000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º"},
    "4": {"name": "–ü–ª–∞–Ω—à–µ—Ç", "price": 15000, "description": "–õ–µ–≥–∫–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã"}
}

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
carts = {}


@dp.message_handler(command("start"))
async def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    carts[user_id] = []
    
    welcome_text = """
üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑

–ö–æ–º–∞–Ω–¥—ã:
/catalog - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
/cart - –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞
/order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
/help - –°–ø—Ä–∞–≤–∫–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞!
    """
    await message.answer(welcome_text)


@dp.message_handler(command("help"))
async def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üõí –ü–æ–º–æ—â—å –ø–æ –º–∞–≥–∞–∑–∏–Ω—É

–ö–æ–º–∞–Ω–¥—ã:
/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
/cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É
/order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/add ID_—Ç–æ–≤–∞—Ä–∞

–ù–∞–ø—Ä–∏–º–µ—Ä: /add 1
    """
    await message.answer(help_text)


@dp.message_handler(command("catalog"))
async def catalog_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
    catalog_text = "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    
    for product_id, product in products.items():
        catalog_text += f"ID: {product_id}\n"
        catalog_text += f"üì± {product['name']}\n"
        catalog_text += f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
        catalog_text += f"üìù {product['description']}\n"
        catalog_text += f"–î–æ–±–∞–≤–∏—Ç—å: /add {product_id}\n\n"
    
    await message.answer(catalog_text)


@dp.message_handler(command("cart"))
async def cart_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cart"""
    user_id = message.from_user.id
    
    if user_id not in carts or not carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for product_id in carts[user_id]:
        product = products[product_id]
        cart_text += f"üì± {product['name']} - {product['price']} ‚ÇΩ\n"
        total += product['price']
    
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    cart_text += "\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order"
    
    await message.answer(cart_text)


@dp.message_handler(command("order"))
async def order_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
    user_id = message.from_user.id
    
    if user_id not in carts or not carts[user_id]:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        return
    
    total = sum(products[product_id]['price'] for product_id in carts[user_id])
    
    order_text = "üìã –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
    order_text += "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
    
    for product_id in carts[user_id]:
        product = products[product_id]
        order_text += f"‚Ä¢ {product['name']} - {product['price']} ‚ÇΩ\n"
    
    order_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    order_text += "\n\n‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    carts[user_id] = []
    
    await message.answer(order_text)


@dp.message_handler(text=lambda text: text.startswith("/add"))
async def add_to_cart_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = message.from_user.id
    
    try:
        product_id = message.text.split()[1]
        
        if product_id not in products:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if user_id not in carts:
            carts[user_id] = []
        
        carts[user_id].append(product_id)
        product = products[product_id]
        
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        
    except IndexError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add ID_—Ç–æ–≤–∞—Ä–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: /add 1")


@dp.message_handler()
async def default_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


if __name__ == "__main__":
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    dp.add_middleware(LoggingMiddleware())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    dp.run()
